<!DOCTYPE html>
<html lang="fr" data-theme="<%= typeof theme !== 'undefined' ? theme : 'default' %>">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0"/>
  <title>Paramètres - Dartboard</title>

  <!-- CSS  -->
  <link href="../../css/font-awesome.css" rel="stylesheet">
  <link href="../../css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
  <link href="../../css/theme-base.css" type="text/css" rel="stylesheet"/>
  <link href="../../css/themes/<%= typeof theme !== 'undefined' ? theme : 'default' %>.css" type="text/css" rel="stylesheet"/>
  
  <style>
    .color-preview {
      width: 25px;
      height: 25px;
      border-radius: 50%;
      display: inline-block;
      margin-right: 10px;
      border: 1px solid #ddd;
      cursor: pointer;
    }
    .color-selector {
      display: flex;
      align-items: center;
      margin: 10px 0;
    }
    .color-input {
      margin-left: 10px;
    }
    .player-name {
      display: flex;
      align-items: center;
    }
    .color-badge {
      width: 15px;
      height: 15px;
      border-radius: 50%;
      display: inline-block;
      margin-right: 8px;
      border: 1px solid rgba(255,255,255,0.5);
    }
    /* Style personnalisé pour les toast */
    .toast-custom {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #323232;
      color: white;
      padding: 10px 20px;
      border-radius: 4px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.3);
      opacity: 0;
      transition: opacity 0.3s, transform 0.3s;
      transform: translateY(20px);
      z-index: 9999;
    }
    .toast-custom.visible {
      opacity: 1;
      transform: translateY(0);
    }
    .toast-custom.success {
      background-color: #4CAF50;
    }
    .toast-custom.error {
      background-color: #F44336;
    }
    .box {
      background-color: var(--primary-color);
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
      padding: 20px;
      margin-bottom: 20px;
    }
    /* Styles pour la prévisualisation des couleurs dérivées */
    .color-variants {
      display: flex;
      flex-direction: column;
      margin-top: 10px;
    }
    .color-variant {
      display: flex;
      align-items: center;
      margin: 5px 0;
    }
    .color-variant-preview {
      width: 15px;
      height: 15px;
      border-radius: 50%;
      margin-right: 8px;
      border: 1px solid rgba(255,255,255,0.5);
    }
    .color-variant-name {
      font-size: 0.8em;
      color: var(--text-color);
      opacity: 0.9;
    }
  </style>
</head>
<body>
  <div class="section no-pad-bot" id="index-banner">
    <div class="section">
        <!--   Icon Section   -->
        <div class="row">
          <div class="col s12 m2">

          </div>
          <div class="col s12 m8">
            <div class="icon-block">
              <div class="center titleMenu">Gestion des joueurs</div>
            </div>
          </div>
          <div class="col s12 m2">
            <div class="icon-block">
              <div class="center titleMenuLeft">Ni</div>
            </div>
          </div>
          <div class="col s12 m1">
          </div>
          <div class="col s12 m7 choiceGameSection">
            <table class="tableCricket">
              <thead>
              <tr>
                <th>Joueur</th>
                <th>Parties</th>
                <th>Touches</th>
                <th>Triples</th>
                <th>Doubles</th>
                <th>Bulles</th>
                <th>Couleur</th>
                <th></th>
              </tr>
              </thead>
              <tbody>
              <% players.forEach(function(player) { %>
                <tr>
                  <td>
                    <div class="player-name">
                      <span class="color-badge" style="background-color: <%= player.color || '#e53935' %>"></span>
                      <%= player.name %>
                    </div>
                  </td>
                  <td><%= player.nbgames %></td>
                  <td><%= player.nbhit %></td>
                  <td><%= player.nbtriple %></td>
                  <td><%= player.nbdouble %></td>
                  <td><%= player.nbbull %></td>
                  <td>
                    <div class="color-selector">
                      <div class="color-preview" style="background-color: <%= player.color || '#e53935' %>" onclick="toggleColorPicker(this)"></div>
                      <input type="color" class="color-input" value="<%= player.color || '#e53935' %>" style="display: none" onchange="updatePlayerColor('<%= player.name %>', this.value)">
                    </div>
                  </td>
                  <td onclick="deletePlayer('<%= player.name %>')" style="font-size: 25px; cursor: pointer;"><i class="fa fa-trash-o" aria-hidden="true"></i></td>
                </tr>
              <% }); %>
              </tbody>
            </table>
          </div>
          <div class="col s12 m3">
            <div class="">
              <div class="content">
                <h2>Ajouter un joueur</h2>
                <input type="text" id="namePlayer" placeholder="Nom du joueur" style="color: white;">
                <div class="color-selector">
                  <span>Couleur:</span>
                  <div class="color-preview" id="newPlayerColorPreview" style="background-color: #e53935" onclick="toggleColorPicker(this)"></div>
                  <input type="color" id="newPlayerColor" value="#e53935" class="color-input" style="display: none" onchange="updateNewPlayerColorPreview(this.value)">
                </div>
                
                <!-- Prévisualisation des couleurs dérivées -->
                <div class="color-variants">
                  <div class="color-variant">
                    <div class="color-variant-preview" id="colorDarkerPreview" style="background-color: #c62828"></div>
                    <span class="color-variant-name">Version sombre</span>
                  </div>
                  <div class="color-variant">
                    <div class="color-variant-preview" id="colorTransparentPreview" style="background-color: #c6282863"></div>
                    <span class="color-variant-name">Version transparente</span>
                  </div>
                </div>
                
                <button class="btn waves-effect waves-light red accent-3" type="button" name="action" onclick="addPlayer()">Ajouter
                </button>
              </div>
            </div>
          </div>
          <div class="col s12 m1">
          </div>
        </div>
      </div>
    <a href="/"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
  </div>
  
  <!-- Conteneur pour les toasts personnalisés -->
  <div id="toast-container"></div>
  
  <!--  Scripts-->
  <script src="../../js/jquery-2.1.1.min.js"></script>
  <script src="../../js/materialize.min.js"></script>
  <script src="../../js/socket.io.js"></script>

  <script>
    var socket = io();
    let gameSelected = 1;
    let nbTotalGame = 3;
    let lastMsg = '';

    // Fonction pour afficher un toast personnalisé
    function showToast(message, type = 'default') {
      const toastContainer = document.getElementById('toast-container');
      const toast = document.createElement('div');
      toast.className = 'toast-custom';
      if (type === 'success') {
        toast.classList.add('success');
      } else if (type === 'error') {
        toast.classList.add('error');
      }
      toast.textContent = message;
      
      toastContainer.appendChild(toast);
      
      // Animation d'entrée
      setTimeout(() => {
        toast.classList.add('visible');
      }, 10);
      
      // Disparaître après 3 secondes
      setTimeout(() => {
        toast.classList.remove('visible');
        setTimeout(() => {
          toastContainer.removeChild(toast);
        }, 300);
      }, 3000);
    }
    
    // Fonction pour convertir la couleur hexadécimale en RGB
    function hexToRgb(hex) {
      // Supprimer le # si présent
      hex = hex.replace('#', '');
      
      // Convertir la chaîne hexadécimale en valeurs RGB
      const r = parseInt(hex.substring(0, 2), 16);
      const g = parseInt(hex.substring(2, 4), 16);
      const b = parseInt(hex.substring(4, 6), 16);
      
      return { r, g, b };
    }
    
    // Fonction pour convertir RGB en hexadécimal
    function rgbToHex(r, g, b) {
      return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }
    
    // Fonction pour assombrir une couleur
    function darkenColor(hex, amount = 0.3) {
      const rgb = hexToRgb(hex);
      
      // Assombrir les valeurs en les multipliant par (1 - amount)
      const r = Math.max(0, Math.floor(rgb.r * (1 - amount)));
      const g = Math.max(0, Math.floor(rgb.g * (1 - amount)));
      const b = Math.max(0, Math.floor(rgb.b * (1 - amount)));
      
      return rgbToHex(r, g, b);
    }
    
    // Fonction pour obtenir une version transparente de la couleur
    function getTransparentColor(hex, opacity = 0.4) {
      const rgb = hexToRgb(hex);
      return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;
    }
    
    // Fonction pour générer les variantes de couleur
    function generateColorVariants(baseColor) {
      const darkerColor = darkenColor(baseColor);
      const transparentColor = getTransparentColor(darkerColor);
      
      return {
        base: baseColor,
        darker: darkerColor,
        transparent: transparentColor
      };
    }

    socket.on('arduino', function(msg) {
      arduinoEvent(msg);
    });
    
    function arduinoEvent(msg){
      if(lastMsg === '') {
        lastMsg = msg;
        if(msg === 'btnNext'){
          if(gameSelected < nbTotalGame){
            gameSelected++;
          }else{
            gameSelected=1
          }
          $('.box').removeClass('selected');
          $('.boxGame'+gameSelected).addClass('selected');
        }else if(msg === 'btnValidate'){
          let nameGame = $('.boxGame'+gameSelected).data('name');
          window.location.replace(""+nameGame);
        }else if(msg === 'btnCancel'){
          window.location.replace("/");
        }
      }

      setTimeout(function(){
        lastMsg = '';
      }, 500);
    }

    // Fonction pour basculer l'affichage du sélecteur de couleur
    function toggleColorPicker(element) {
      const colorInput = $(element).siblings('.color-input');
      colorInput.toggle();
      if (colorInput.is(':visible')) {
        colorInput.focus().click();
      }
    }
    
    // Fonction pour mettre à jour la couleur d'un joueur
    function updatePlayerColor(playerName, color) {
      // Générer les variantes de couleur
      const colorVariants = generateColorVariants(color);
      
      // Envoyer la requête avec toutes les couleurs
      socket.emit('updatePlayerColor', { 
        name: playerName, 
        color: color,
        colorDarker: colorVariants.darker,
        colorTransparent: colorVariants.transparent
      });
      
      // Mise à jour visuelle en temps réel
      $(event.target).siblings('.color-preview').css('background-color', color);
      
      // Utiliser notre fonction de toast personnalisée
      showToast('Couleur du joueur mise à jour!', 'success');
    }
    
    // Fonction pour mettre à jour l'aperçu de la couleur pour un nouveau joueur
    function updateNewPlayerColorPreview(color) {
      // Mettre à jour la couleur principale
      $('#newPlayerColorPreview').css('background-color', color);
      
      // Générer et mettre à jour les variantes de couleur
      const colorVariants = generateColorVariants(color);
      $('#colorDarkerPreview').css('background-color', colorVariants.darker);
      $('#colorTransparentPreview').css('background-color', colorVariants.transparent);
    }

    function addPlayer(){
      const playerName = $('#namePlayer').val();
      if (!playerName || playerName.trim() === '') {
        showToast('Veuillez entrer un nom de joueur!', 'error');
        return;
      }
      
      const playerColor = $('#newPlayerColor').val();
      
      // Générer les variantes de couleur
      const colorVariants = generateColorVariants(playerColor);
      
      // Envoyer la requête avec toutes les couleurs
      socket.emit('addPlayer', { 
        name: playerName, 
        color: playerColor,
        colorDarker: colorVariants.darker,
        colorTransparent: colorVariants.transparent
      });
      
      // Feedback et délai avant rechargement
      showToast('Joueur ajouté!', 'success');
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    }

    function deletePlayer(id){
      if (window.confirm("Voulez vous supprimer le joueur ?")) {
        socket.emit('deletePlayer', id);
        
        // Feedback et délai avant rechargement
        showToast('Joueur supprimé!', 'success');
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }
    }
    
    // Initialiser les fonctionnalités JS au chargement de la page
    document.addEventListener('DOMContentLoaded', function() {
      // Générer les variantes de couleur initiales
      updateNewPlayerColorPreview($('#newPlayerColor').val());
      
      console.log('Page chargée et prête');
    });
  </script>
</body>
</html>
